#include <rtthread.h>

#define THREAD_PRIORITY         8
#define THREAD_TIMESLICE        5

/* Pointer to the mutex */
static rt_mutex_t dynamic_mutex = RT_NULL;
static rt_uint8_t number = 0;
rt_uint8_t max = 8;


void print_priorities (void);

ALIGN(RT_ALIGN_SIZE)
static char thread1_stack[1024];
static struct rt_thread thread1;
static void rt_thread_entry1(void *parameter)
{
      while(1)
      {
          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);
          rt_thread_mdelay(10);
          rt_kprintf("Thread 1 obtains the mutex. //+1 \n");

          print_priorities();

          number++;
          rt_kprintf("Number value: %d \n", number);

          rt_mutex_release(dynamic_mutex);
          rt_kprintf("Thread 1 releases the mutex. \n");

          print_priorities();

          if(number>=max)
              return;
       }
}

ALIGN(RT_ALIGN_SIZE)
static char thread2_stack[1024];
static struct rt_thread thread2;
static void rt_thread_entry2(void *parameter)
{
      while(1)
      {

          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);
          rt_thread_mdelay(10);
          rt_kprintf("Thread 2 obtains the mutex. //*2 \n");

          number*=2;
          rt_kprintf("Number value: %d \n", number);

          rt_mutex_release(dynamic_mutex);
          rt_kprintf("Thread 2 releases the mutex. \n");

          if(number>=max)
              return;
      }
}

void print_priorities (void)
    {
        rt_kprintf("Thread 1 priority: %d \n", thread1.current_priority);
        rt_kprintf("Thread 2 priority: %d \n", thread2.current_priority);
    }

/* Initialization of the mutex sample */
int main(void)
{

    /* Initial value */
    rt_kprintf("Number value: %d \n", number);

    /* Create a dynamic mutex */
    dynamic_mutex = rt_mutex_create("dmutex", RT_IPC_FLAG_PRIO);
    if (dynamic_mutex == RT_NULL)
    {
        rt_kprintf("create dynamic mutex failed.\n");
        return -1;
    }

    rt_thread_init(&thread1,
                   "thread1",
                   rt_thread_entry1,
                   RT_NULL,
                   &thread1_stack[0],
                   sizeof(thread1_stack),
                   THREAD_PRIORITY, THREAD_TIMESLICE);
    rt_thread_startup(&thread1);

    rt_thread_init(&thread2,
                   "thread2",
                   rt_thread_entry2,
                   RT_NULL,
                   &thread2_stack[0],
                   sizeof(thread2_stack),
                   THREAD_PRIORITY-1, THREAD_TIMESLICE);
    rt_thread_startup(&thread2);
    return 0;
}
