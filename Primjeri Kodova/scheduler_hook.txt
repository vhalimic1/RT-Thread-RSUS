#include <rtthread.h>

#define THREAD_STACK_SIZE   1024
#define THREAD_PRIORITY     20
#define THREAD_TIMESLICE    10

/* Counter for each thread */
volatile rt_uint32_t count[2];

/* Threads 1, 2 share an entry, but the entry parameters are different */
static void thread_entry(void* parameter)
{
    rt_uint32_t value;
    rt_uint32_t count = 0;

    value = (rt_uint32_t)parameter;
    while (1)
    {
        rt_kprintf("thread %d is running\n", value);
        rt_thread_mdelay(1000); // Delay for a while
        
        /* 
         * Next line of code shortens the console output,
         * so we can see only a few of the context changes.
         */
        if (count++>3)
        {
            return;
        }
    }
}

static rt_thread_t tid1 = RT_NULL;
static rt_thread_t tid2 = RT_NULL;

static void hook_of_scheduler(struct rt_thread* from, struct rt_thread* to)
{
    /*
     * We will print output to a console,
     * only when one of the threads in context change
     * is user defined thread.
     */
    rt_int8_t log1 = rt_strcmp(from->name, "thread1");
    rt_int8_t log2 = rt_strcmp(from->name, "thread2");
    rt_int8_t log3 = rt_strcmp(to->name, "thread1");
    rt_int8_t log4 = rt_strcmp(to->name, "thread2");

    if (!log1 || !log2 || !log3 || !log4)
    {
        rt_kprintf("from: %s -->  to: %s \n", from->name , to->name);
    }
}

int main(void)
{
    /* Set the scheduler hook */
    rt_scheduler_sethook(hook_of_scheduler);

    /* Create Thread 1 */
    tid1 = rt_thread_create("thread1",
                            thread_entry, (void*)1,
                            THREAD_STACK_SIZE,
                            THREAD_PRIORITY, THREAD_TIMESLICE);
    if (tid1 != RT_NULL)
        rt_thread_startup(tid1);

    /* Create Thread 2 */
    tid2 = rt_thread_create("thread2",
                            thread_entry, (void*)2,
                            THREAD_STACK_SIZE,
                            THREAD_PRIORITY,THREAD_TIMESLICE - 5);
    if (tid2 != RT_NULL)
        rt_thread_startup(tid2);
    return 0;
}
